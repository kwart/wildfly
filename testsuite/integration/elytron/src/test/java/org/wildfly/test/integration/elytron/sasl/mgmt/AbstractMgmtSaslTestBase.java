/*
 * Copyright 2017 JBoss by Red Hat.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.wildfly.test.integration.elytron.sasl.mgmt;

import static org.hamcrest.CoreMatchers.instanceOf;
import static org.hamcrest.CoreMatchers.is;

import java.io.IOException;
import java.net.ConnectException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import javax.security.sasl.SaslException;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.as.controller.client.ModelControllerClient;
import org.jboss.as.controller.client.ModelControllerClientConfiguration;
import org.jboss.as.controller.client.helpers.Operations;
import org.jboss.as.test.integration.management.util.CLIWrapper;
import org.jboss.as.test.integration.security.common.Utils;
import org.jboss.dmr.ModelNode;
import org.jboss.logging.Logger;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.StringAsset;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Test;
import org.wildfly.security.auth.client.AuthenticationConfiguration;
import org.wildfly.security.auth.client.AuthenticationContext;
import org.wildfly.security.auth.client.MatchRule;
import org.wildfly.security.auth.permission.LoginPermission;
import org.wildfly.security.credential.BearerTokenCredential;
import org.wildfly.test.security.common.elytron.ConfigurableElement;
import org.wildfly.test.security.common.elytron.ConstantPermissionMapper;
import org.wildfly.test.security.common.elytron.ConstantRoleMapper;
import org.wildfly.test.security.common.elytron.FileSystemRealm;
import org.wildfly.test.security.common.elytron.MechanismConfiguration;
import org.wildfly.test.security.common.elytron.MechanismRealmConfiguration;
import org.wildfly.test.security.common.elytron.PermissionRef;
import org.wildfly.test.security.common.elytron.SaslFilter;
import org.wildfly.test.security.common.elytron.SimpleConfigurableSaslServerFactory;
import org.wildfly.test.security.common.elytron.SimpleSaslAuthenticationFactory;
import org.wildfly.test.security.common.elytron.SimpleSecurityDomain;
import org.wildfly.test.security.common.elytron.SimpleSecurityDomain.SecurityDomainRealm;
import org.wildfly.test.security.common.other.SimpleMgmtNativeInterface;
import org.wildfly.test.security.common.other.SimpleSocketBinding;

/**
 * Parent class for management interface SASL tests.
 *
 * @author Josef Cacek
 */
public abstract class AbstractMgmtSaslTestBase {

    private static Logger LOGGER = Logger.getLogger(AbstractMgmtSaslTestBase.class);

    protected static final String NAME = AbstractMgmtSaslTestBase.class.getSimpleName();
    protected static final int PORT_NATIVE = 10567;
    protected static final String ROLE_SASL = "sasl";

    protected static final String USERNAME = "guest";

    // set-password algorithm names, used also as user names for testing given algorithm
    protected static final String DIGEST_ALGORITHM_MD5 = "digest-md5";
    protected static final String DIGEST_ALGORITHM_SHA = "digest-sha";
    protected static final String DIGEST_ALGORITHM_SHA256 = "digest-sha-256";
    protected static final String DIGEST_ALGORITHM_SHA512 = "digest-sha-512";

    /**
     * Token generated by https://kjur.github.io/jsrsasign/tool/tool_jwt.html (using HS256 signing algorithm with a default
     * shared key)
     *
     * <pre>
     * {
     *   "alg": "HS256",
     *   "typ": "JWT"
     * }
     * {
     *   "iss": "issuer.wildfly.org",
     *   "sub": "elytron@wildfly.org",
     *   "exp": 2051222399,  // 20341231235959Z
     *   "aud": "jwt"
     * }
     * </pre>
     */
    protected static final String JWT_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJpc3N1ZXIud2lsZGZseS5vcmciLCJzdWIiOiJlbHl0cm9uQHdpbGRmbHkub3JnIiwiZXhwIjoyMDUxMjIyMzk5LCJhdWQiOiJqd3QifQ.jOcMdBLdI7HMuW_VsoGD_7LqeX6M14_wV5ebP2S4tOM";

    // password is just username with a suffix
    protected static final String PASSWORD_SFX = "-pwd";

    @Deployment(testable = false)
    public static WebArchive dummyDeployment() {
        return ShrinkWrap.create(WebArchive.class, NAME + ".war").addAsWebResource(new StringAsset("Test"), "index.html");
    }

    abstract protected String getMechanism();

    /**
     * Tests that client fails to use other mechanisms than the server allows.
     */
    @Test
    public void testOtherMechsFail() throws Exception {
        Arrays.asList("ANONYMOUS", "", "1" + getMechanism(), getMechanism() + "1", "DIGEST-MD5", "DIGEST-SHA", "DIGEST-SHA-256",
                "DIGEST-SHA-512", "PLAIN", "SCRAM-SHA-1", "JBOSS-LOCAL-USER").forEach(s -> {
                    if (!getMechanism().equals(s)) {
                        assertMechFails(s);
                    }
                });
    }

    @Test
    public void testOtherDigestMechsFail() throws Exception {
        Arrays.asList("MD5", "SHA", "SHA-256", "SHA-512").forEach(s -> {
            if (!getMechanism().equals(s)) {
                final String mech = "DIGEST-" + s;
                assertDigestMechFails(mech, mech.toLowerCase(Locale.ROOT));
            }
        });
    }

    protected void assertAuthenticationFails() {
        try {
            executeWhoAmI();
        } catch (IOException e) {
            Throwable cause = e.getCause();
            Assert.assertThat(cause, is(instanceOf(ConnectException.class)));
            Assert.assertThat(cause.getCause(), is(instanceOf(SaslException.class)));
        }
    }

    protected ModelNode executeWhoAmI() throws IOException {
        ModelControllerClient client = ModelControllerClient.Factory
                .create(new ModelControllerClientConfiguration.Builder().setHostName(Utils.getDefaultHost(false))
                        .setPort(PORT_NATIVE).setProtocol("remote").setConnectionTimeout(600 * 1000).build());

        ModelNode operation = new ModelNode();
        operation.get("operation").set("whoami");
        operation.get("verbose").set("true");

        return client.execute(operation);
    }

    protected void assertWhoAmI(String expected) {
        try {
            ModelNode result = executeWhoAmI();
            Assert.assertTrue("The whoami operation should finish with success", Operations.isSuccessfulOutcome(result));
            Assert.assertEquals("The whoami operation returned unexpected value", expected,
                    Operations.readResult(result).get("identity").get("username").asString());
        } catch (IOException e) {
            LOGGER.warn("Operation execution failed", e);
            Assert.fail("The whoami operation failed - " + e.getMessage());
        }
    }

    protected AuthenticationContext createValidConfigForMechanism(String mechanismName, String username) {
        AuthenticationConfiguration authnCfg = AuthenticationConfiguration.EMPTY.allowSaslMechanisms(mechanismName)
        // FIXME commented out due to WFLY-8742
        // .useDefaultProviders()
        ;
        if ("ANONYMOUS".equals(mechanismName)) {
            authnCfg = authnCfg.useAnonymous();
        } else if ("OAUTHBEARER".equals(mechanismName)) {
            authnCfg = authnCfg.useBearerTokenCredential(new BearerTokenCredential(JWT_TOKEN));
        } else if (!"JBOSS-LOCAL-USER".equals(mechanismName)) {
            authnCfg = authnCfg.useName(username).usePassword(username + PASSWORD_SFX);
        }
        return AuthenticationContext.empty().with(MatchRule.ALL, authnCfg);
    }

    protected AuthenticationContext createValidConfigForMechanism(String mechanismName) {
        return createValidConfigForMechanism(mechanismName, USERNAME);
    }

    protected void assertMechFails(String mechanismName) {
        createValidConfigForMechanism(mechanismName).run(() -> assertAuthenticationFails());
    }

    protected void assertDigestMechFails(String mechanismName, String digestAlg) {
        createValidConfigForMechanism(mechanismName, digestAlg).run(() -> assertAuthenticationFails());
    }

    protected void assertMechPassWhoAmI(String mechanismName, String expectedUsername) {
        createValidConfigForMechanism(mechanismName).run(() -> assertWhoAmI(expectedUsername));
    }

    protected void assertDigestMechPassWhoAmI(String mechanismName, String digestAlg) {
        // as the "digest-*" users are not in the ManagementFsRealm, the management identity will be "anonymous" here
        createValidConfigForMechanism(mechanismName, digestAlg).run(() -> assertWhoAmI("anonymous"));
    }

    /**
     * Creates a new list or ConfigurableElements with basic SASL settings for native management interface.
     *
     * @param saslMechanismName Name of single SASL mechanism to be allowed on server.
     * @return new list (modifiable)
     */
    protected static List<ConfigurableElement> createConfigurableElementsForSaslMech(String saslMechanismName) {
        List<ConfigurableElement> elements = new ArrayList<>();

        elements.add(ConstantPermissionMapper.builder().withName(NAME)
                .withPermissions(PermissionRef.fromPermission(new LoginPermission())).build());
        elements.add(ConstantRoleMapper.builder().withName(NAME).withRoles(ROLE_SASL).build());
        elements.add(FileSystemRealm.builder().withName(NAME).withUser(USERNAME, USERNAME + PASSWORD_SFX, ROLE_SASL).build());
        elements.add(new ConfigurableElement() {
            @Override
            public void create(CLIWrapper cli) throws Exception {
                cli.sendLine("/subsystem=elytron/token-realm=JWT:add(jwt={}, principal-claim=aud)");
                cli.sendLine("/subsystem=elytron/constant-realm-mapper=JWT:add(realm-name=JWT)");
            }

            @Override
            public void remove(CLIWrapper cli) throws Exception {
                cli.sendLine("/subsystem=elytron/constant-realm-mapper=JWT:remove()");
                cli.sendLine("/subsystem=elytron/token-realm=JWT:remove()");
            }

            @Override
            public String getName() {
                return "token-realm";
            }
        });
        elements.add(SimpleSecurityDomain.builder().withName(NAME).withDefaultRealm(NAME).withPermissionMapper(NAME)
                .withRealms(SecurityDomainRealm.builder().withRealm(NAME).build(),
                        SecurityDomainRealm.builder().withRealm("JWT").build())
                .withRoleMapper(NAME).build());

        elements.add(new ConfigurableElement() {

            private void addUserWithDigestPass(CLIWrapper cli, String algorithm) {
                cli.sendLine(
                        String.format("/subsystem=elytron/filesystem-realm=%s:add-identity(identity=%s)", NAME, algorithm));
                cli.sendLine(String.format(
                        "/subsystem=elytron/filesystem-realm=%1$s:set-password(identity=%2$s, digest={algorithm=%2$s, password=%2$s%3$s, realm=%1$s})",
                        NAME, algorithm, PASSWORD_SFX));
            }

            @Override
            public void create(CLIWrapper cli) throws Exception {
                cli.sendLine(String.format(
                        "/subsystem=elytron/security-domain=ManagementDomain:write-attribute(name=trusted-security-domains, value=[%s])",
                        NAME));

                // identities with digested PWD
                addUserWithDigestPass(cli, DIGEST_ALGORITHM_MD5);
                addUserWithDigestPass(cli, DIGEST_ALGORITHM_SHA);
                addUserWithDigestPass(cli, DIGEST_ALGORITHM_SHA256);
                addUserWithDigestPass(cli, DIGEST_ALGORITHM_SHA512);
            }

            @Override
            public void remove(CLIWrapper cli) throws Exception {
                cli.sendLine(
                        "/subsystem=elytron/security-domain=ManagementDomain:undefine-attribute(name=trusted-security-domains)");
                // no need to remove identities, they'll be resolved with removing the FS realm
            }

            @Override
            public String getName() {
                return "domain-trust-and-identities";
            }
        });

        elements.add(SimpleConfigurableSaslServerFactory.builder().withName(NAME).withSaslServerFactory("elytron")
                .addFilter(SaslFilter.builder().withPatternFilter(saslMechanismName).build()).build());
        elements.add(
                SimpleSaslAuthenticationFactory.builder().withName(NAME).withSaslServerFactory(NAME).withSecurityDomain(NAME)
                        .addMechanismConfiguration(MechanismConfiguration.builder().withMechanismName("OAUTHBEARER")
                                .withRealmMapper("JWT").build())
                        .addMechanismConfiguration(
                                MechanismConfiguration.builder().withMechanismName(saslMechanismName)
                                        .addMechanismRealmConfiguration(
                                                MechanismRealmConfiguration.builder().withRealmName(NAME).build())
                                        .build())
                        .build());

        elements.add(SimpleSocketBinding.builder().withName(NAME).withPort(PORT_NATIVE).build());
        elements.add(SimpleMgmtNativeInterface.builder().withSocketBinding(NAME).withSaslAuthenticationFactory(NAME).build());
        return elements;
    }

}
